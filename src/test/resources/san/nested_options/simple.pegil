fn main (pos : IData (InputCursor_t Octet), limit : IData (InputSnapshot_t Octet), out : EData OutputBuffer_t) {
  var cur_snapshot : IData (InputSnapshot_t Octet);
  var end_snapshot : IData OutputSnapshot_t;
  let cur_snapshot = snapshot (pos);
  let end_snapshot = end_of (out);
  try {
    call start (pos, limit, out);
    require ! (pos < limit)
  }
  recover {
    truncate (end_snapshot, out);
    set_cursor (pos, cur_snapshot)
  }
}
fn start (pos : IData (InputCursor_t Octet), limit : IData (InputSnapshot_t Octet), out : EData OutputBuffer_t) {
  var token : IData (Match_t (Anchored, Octet));
  var cur_snapshot : IData (InputSnapshot_t Octet);
  var end_snapshot : IData OutputSnapshot_t;
  alt {
    {
      let token = find_at (regex ([.]), pos, limit);
      require is_match (token);
      append (".", out);
      set_cursor (pos, end_of_match (token));
      call start (pos, limit, out);
      alt {
        {
          let cur_snapshot = snapshot (pos);
          let end_snapshot = end_of (out);
          try {
            append_mks ([StartUserOp (0, (* Replace "" *))], out);
            alt {
              {
                let token = find_at (regex ([ ]), pos, limit);
                require is_match (token);
                append_mks ([StartUserOp (2, (* Replace " " *))], out);
                set_cursor (pos, end_of_match (token));
                append_mks ([EndUserOp], out)
              } else {
              }
            };
            let token = find_at (regex ([,]), pos, limit);
            require is_match (token);
            append_mks ([EndUserOp], out);
            append (",", out);
            set_cursor (pos, end_of_match (token))
          }
          recover {
            truncate (end_snapshot, out);
            set_cursor (pos, cur_snapshot)
          }
        } else {
        }
      }
    } else {
    }
  }
}
